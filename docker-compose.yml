# 1* in docker compose v2 we don't have to specify the version, it will use the latest by default
# 2* all variables that we use like ${SOMETHING} are defined in .env file that must be placed on the same level as this file
# 3* in volumes we use - ./app:${LARAVEL_ROOT} to mount files in our system that are located in ./app directory to ${LARAVEL_ROOT} directory in the container
#    ${LARAVEL_ROOT} is a default directory that we set as WORKDIR in Dockerfile for our laravel project files
#    specifying this in volumes of our servers we make the same local files available in each container

services:
  laravel-webserver:
    image: nginx:stable-alpine # get a stable lightweight version of nginx
    working_dir: ${LARAVEL_ROOT} #2*
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro #replace default.conf and make it read-only to prevent container write something to our original file
      - ./app:${LARAVEL_ROOT} #3*
    ports:
      - "${WEB_SERVER_PORT}:80" #2*
  
  laravel-php-fpm:
    build: 
      context: php-fpm #specify in which directory to look for Dockerfile, directory is relative to the location of this docker-compose.yml file
      dockerfile: Dockerfile
    working_dir: ${LARAVEL_ROOT} #2*
    volumes:
      - ./app:${LARAVEL_ROOT} #3*

  laravel-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} #2*
      MYSQL_DATABASE: ${DB_DATABASE} #2*
      MYSQL_USER: ${DB_USER} #2*
      MYSQL_PASSWORD: ${DB_PASSWORD} #2*
    ports:
      - "${DB_PORT}:3306" #2*
    volumes:
      - mysql-data:/var/lib/mysql # this is a named volume that will be created by docker, it will store mysql data in a separate location on our system to persist data

volumes:
  mysql-data: # named volume for mysql data that is necessary to create to use it in mysql service
    driver: local